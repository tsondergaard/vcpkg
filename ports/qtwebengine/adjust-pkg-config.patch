diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7d4638139c..5715639c10 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,6 +19,13 @@ project(QtWebEngine
     HOMEPAGE_URL "https://qt.io/"
     LANGUAGES CXX C
 )
+
+if(CMAKE_BUILD_TYPE STREQUAL "Debug")
+  set(ENV{PKG_CONFIG_PATH} "${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug/lib/pkgconfig")
+else()
+  set(ENV{PKG_CONFIG_PATH} "${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib/pkgconfig")
+endif()
+
 qt_internal_project_setup()
 
 find_package(Qt6 ${PROJECT_VERSION} CONFIG QUIET OPTIONAL_COMPONENTS
diff --git a/cmake/Functions.cmake b/cmake/Functions.cmake
index e1044de8f5..06b20a659e 100644
--- a/cmake/Functions.cmake
+++ b/cmake/Functions.cmake
@@ -84,6 +84,8 @@ function(create_static_config cmakeTarget arch configFileName)
         set(lib Qt::${lib}Private)
         list(APPEND contents "set(GN_${out}_INCLUDES \"$<$<STREQUAL:$<TARGET_NAME_IF_EXISTS:${lib}>,${lib}>:$<TARGET_PROPERTY:${lib},INTERFACE_INCLUDE_DIRECTORIES>>\")")
     endforeach()
+    list(APPEND contents "set(VCPKG_TARGET_TRIPLET \"${VCPKG_TARGET_TRIPLET}\")")
+    list(APPEND contents "set(VCPKG_INSTALLED_DIR \"${VCPKG_INSTALLED_DIR}\")")
     list(JOIN contents "\n" contents)
     file(GENERATE
         OUTPUT $<CONFIG>/${arch}/${configFileName}
@@ -829,13 +831,16 @@ macro(append_build_type_setup)
         enable_rust=false # We do not yet support rust
     )
     if(${config} STREQUAL "Debug")
+        list(APPEND gnArgArg vcpkg_rpath="${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug/lib")
         list(APPEND gnArgArg is_debug=true symbol_level=2)
         if(WIN32)
             list(APPEND gnArgArg enable_iterator_debugging=true)
         endif()
     elseif(${config} STREQUAL "Release")
+        list(APPEND gnArgArg vcpkg_rpath="${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib")
         list(APPEND gnArgArg is_debug=false symbol_level=0)
     elseif(${config} STREQUAL "RelWithDebInfo")
+        list(APPEND gnArgArg vcpkg_rpath="${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib")
         list(APPEND gnArgArg is_debug=false)
         if(WIN32 AND NOT CLANG)
             list(APPEND gnArgArg symbol_level=2)
@@ -843,6 +848,7 @@ macro(append_build_type_setup)
             list(APPEND gnArgArg symbol_level=1)
         endif()
     elseif(${config} STREQUAL "MinSizeRel")
+        list(APPEND gnArgArg vcpkg_rpath="${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib")
         list(APPEND gnArgArg is_debug=false symbol_level=0 optimize_for_size=true)
     endif()
     if(FEATURE_developer_build OR (${config} STREQUAL "Debug") OR QT_FEATURE_webengine_sanitizer)
@@ -1260,6 +1266,7 @@ function(add_gn_command)
              -DPython3_EXECUTABLE=${Python3_EXECUTABLE}
              -DGN_THREADS=$ENV{QTWEBENGINE_GN_THREADS}
              -DQT_ALLOW_SYMLINK_IN_PATHS=${QT_ALLOW_SYMLINK_IN_PATHS}
+             -DQT_GN_BUILD_TYPE=$<CONFIG>
              -P ${WEBENGINE_ROOT_SOURCE_DIR}/cmake/Gn.cmake
         WORKING_DIRECTORY ${WEBENGINE_ROOT_BUILD_DIR}
         COMMENT "Run gn for target ${arg_CMAKE_TARGET} in ${arg_BUILDDIR}"
diff --git a/cmake/Gn.cmake b/cmake/Gn.cmake
index 15b349e089..39d4a0fc90 100644
--- a/cmake/Gn.cmake
+++ b/cmake/Gn.cmake
@@ -41,6 +41,7 @@ init_gn_config(${buildDir}/gn_config_target.cmake)
 read_gn_config(${buildDir}/gn_config_cxx.cmake)
 read_gn_config(${buildDir}/gn_config_c.cmake)
 read_gn_config(${buildDir}/gn_static.cmake)
+include(${buildDir}/gn_static.cmake)
 
 configure_gn_target(
    "${sourceDir}"
@@ -61,10 +62,25 @@ LIST(SORT printArgArg)
 STRING(REGEX REPLACE ";" "\n" printArgArg "${printArgArg}")
 list(JOIN gnArg " " printArg)
 
+if(NOT WIN32)
+  if(QT_GN_BUILD_TYPE STREQUAL "Debug")
+    set(pcset "PKG_CONFIG_PATH=${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug/lib/pkgconfig")
+  else()
+    set(pcset "PKG_CONFIG_PATH=${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib/pkgconfig")
+  endif()
+endif()
+
+if(QT_GN_BUILD_TYPE STREQUAL "Debug")
+  set(ENV{PKG_CONFIG_PATH} "${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug/lib/pkgconfig")
+else()
+  set(ENV{PKG_CONFIG_PATH} "${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib/pkgconfig")
+endif()
+
 message("-- Running gn in ${buildDir}\n"
         "-- GN command:\n${gnCmd} ${printArg}\n"
         "-- GN arg file:\n${buildDir}/args.gn\n"
-        "-- GN args: \n${printArgArg}"
+        "-- GN args: \n${printArgArg}\n"
+        "-- pcset ${pcset}"
 )
 
 execute_process(
diff --git a/src/3rdparty/chromium/build/config/BUILD.gn b/src/3rdparty/chromium/build/config/BUILD.gn
index e6fc74187..39ed0cf50 100644
--- a/src/3rdparty/chromium/build/config/BUILD.gn
+++ b/src/3rdparty/chromium/build/config/BUILD.gn
@@ -45,6 +45,19 @@ if (is_android) {
 # .gni file if you need it from more than one place) rather than making global
 # flags. See //build/config/BUILDCONFIG.gn for advice on where to define
 # build flags.
+
+declare_args() {
+  vcpkg_rpath = ""
+}
+
+config("rpath_config") {
+  if (is_linux || is_chromeos) {
+    ldflags = [
+      "-Wl,--rpath=$vcpkg_rpath"
+    ]
+  }
+}
+
 config("feature_flags") {
   defines = []
   if (dcheck_always_on) {
diff --git a/src/3rdparty/chromium/components/url_formatter/spoof_checks/top_domains/BUILD.gn b/src/3rdparty/chromium/components/url_formatter/spoof_checks/top_domains/BUILD.gn
index 97c28c796..4a5439674 100644
--- a/src/3rdparty/chromium/components/url_formatter/spoof_checks/top_domains/BUILD.gn
+++ b/src/3rdparty/chromium/components/url_formatter/spoof_checks/top_domains/BUILD.gn
@@ -34,6 +34,7 @@ executable("top_domain_generator") {
   if (is_ios) {
     frameworks = [ "UIKit.framework" ]
   }
+  configs += [ "//build/config:rpath_config" ]
 }
 
 compiled_action("generate_top_domains_trie") {
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
index ee7d37507..bb8da713b 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
@@ -128,7 +128,7 @@ executable("character_data_generator") {
     "text/character_property_data.h",
     "text/character_property_data_generator.cc",
   ]
-  configs += [ "//third_party/blink/renderer:config" ]
+  configs += [ "//third_party/blink/renderer:config", "//build/config:rpath_config" ]
   deps = [
     # Default manifest on Windows(a no-op elsewhere).
     "//base",
diff --git a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
index eba55aa65..87d8d9862 100644
--- a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
+++ b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
@@ -101,6 +101,7 @@ if (use_v8_context_snapshot) {
       configs += [
         "//v8:external_startup_data",
         ":disable_icf",
+        "//build/config:rpath_config"
       ]
     }
   }
diff --git a/src/3rdparty/chromium/v8/BUILD.gn b/src/3rdparty/chromium/v8/BUILD.gn
index b83b22ea0..f47218f79 100644
--- a/src/3rdparty/chromium/v8/BUILD.gn
+++ b/src/3rdparty/chromium/v8/BUILD.gn
@@ -6841,7 +6841,7 @@ if (current_toolchain == v8_snapshot_toolchain) {
       sources += [ "src/deoptimizer/deoptimizer-cfi-empty.cc" ]
     }
 
-    configs = [ ":internal_config" ]
+    configs = [ ":internal_config", "//build/config:rpath_config" ]
 
     deps = [
       ":v8_base_without_compiler",
@@ -6928,7 +6928,7 @@ if (v8_enable_i18n_support) {
         v8_icu_path,
       ]
 
-      configs = [ ":internal_config" ]
+      configs = [ ":internal_config", "//build/config:rpath_config" ]
     }
   }
 
